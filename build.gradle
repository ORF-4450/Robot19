plugins {
    id "java"
    id "eclipse"
    id "idea"
    id "edu.wpi.first.GradleRIO" version "2019.3.2"
    id "org.ajoberstar.grgit" version "3.0.0"
}

def ROBOT_MAIN_CLASS = "Team4450.Robot19.Main"

// If you want the build task to automatically attempt to deploy to the robot, leave this as is.
// If you are using VSCode to deploy, it is recommended to comment this line out and use the Deploy command in VSCode.
build.finalizedBy 'deploy'

// Define my targets (RoboRIO) and artifacts (deployable files)
// This is added by GradleRIO's backing project EmbeddedTools.
deploy {
    targets {
        roboRIO("roborio") {
            // Team number is loaded either from the .wpilib/wpilib_preferences.json
            // or from command line. If not found an exception will be thrown.
            // You can use getTeamOrDefault(team) instead of getTeamNumber if you
            // want to store a team number in this file.
            team = frc.getTeamOrDefault(4450)
        }
    }
    artifacts {
        frcJavaArtifact('frcJava') {
            targets << "roborio"
            // Debug can be overridden by command line, for use with VSCode
            debug = frc.getDebugOrDefault(false)
        }
        // Built in artifact to deploy arbitrary files to the roboRIO.
        fileTreeArtifact('frcStaticFileDeploy') {
            // The directory below is the local directory to deploy
            files = fileTree(dir: 'src/main/deploy')
            // Deploy to RoboRIO target, into /home/lvuser/deploy
            targets << "roborio"
            directory = '/home/lvuser'
        }
    }
}

// Set this to true to enable desktop support.
def includeDesktopSupport = false

// Setup eclipse classpath settings, so the javadoc and sources are available in eclipse
eclipse {
    classpath {
        downloadJavadoc = true
        downloadSources = true
    }
}

// Look in local maven cache first, then maven central for dependent libraries.
repositories {
	mavenLocal()
	mavenCentral()
}

// Defining dependencies. In this case, WPILib (+ friends), vendor libraries from the vendordeps folder,
// and JUnit for unit testing.
dependencies {
    compile wpi.deps.wpilib()
    compile wpi.deps.vendor.java()
    nativeZip wpi.deps.vendor.jni(wpi.platforms.roborio)
    nativeDesktopZip wpi.deps.vendor.jni(wpi.platforms.desktop)
    testCompile 'junit:junit:4.12'
    compile files("C:\\Users\\rcorn\\wpilib\\user\\RobotLib\\Pathfinder-java-1.8.jar")    
}

// These next definitions (branch and hash) attempt to find extra information to add to the the manifest of
// the robot program jar file.

// Either the name of the current branch, or an empty string if no git repo is found.
def branch = { ->
    if (grgit == null) { // If there's no git repo.
        return ""
    }

    return grgit.branch.current().getName()
}

// Either the short hash of the last commit or an empty string if no git repo is found.
def hash = { ->
    if (grgit == null) { // If there's no git repo.
        return ""
    }
    
    return grgit.head().abbreviatedId
}

// Setting up robot program Jar File. In this case, adding all libraries into the main jar ('fat jar')
// in order to make them all available at runtime. Also adding the manifest so WPILib
// knows where to look for our Robot Class. Add version information to jar manifest.
jar {
    from { configurations.compile.collect { it.isDirectory() ? it : zipTree(it) } }
    manifest edu.wpi.first.gradlerio.GradleRIOPlugin.javaManifest(ROBOT_MAIN_CLASS)
        
    manifest {
     	attributes("Branch": branch())
      	attributes("Commit": hash())
       	attributes("Time": new Date().format("yyyy-MM-dd HH:mm:ss"))
     	attributes("User": System.getProperty("user.name"))
    }
}